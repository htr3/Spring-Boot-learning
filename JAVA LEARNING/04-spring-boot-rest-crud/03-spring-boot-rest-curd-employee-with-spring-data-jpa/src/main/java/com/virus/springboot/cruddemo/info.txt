REST API Design
-  For real-time projects, who will use your API?
- Also, how will they use your API?
- Design the APT based on requirements.

API Design process.
1. Review API requirements
2. Identify main resource / entity
3. Use HTTP methods to assign action on resource.
API Requirements

example
Create a REST API for the Employee Directory
Rest clients should be able to
1. Get a list of employees
2. Get a single employee by id
3. Add new emplyee
4. Update an employee
5. Delete an employee

 Identify main resource/ entiy
    To identiy main resource / entity, look for the most prominent "noun".
    for out project, it is "employee"
    Convention is to use plural form of resource \ entiy : employees.

 Use HTTP method to assign action on resource.

Employee Real-Time Project

HTTP Method
POST                /api/employees                  Create a new employee
GET                    /api/employees
GET                    /api/employees/{employeeId}
PUT                     /api/employees
DELETE               /api/employees/{employeeId}
-------------------------------------------------------------------------------
Project Development Process
1. Set up Database Dev Enviromnet
2. create spring boot project using Spring Initializr
3. Get list of Employee
4. Get single employee by ID
5. Add a new Employee
6. Update an existing employee
7. Delete an existing employee.

APPLICATION ARCHITECTURE

Employee REST controller <-> Employee Service <-> Employee DAO(JPA)  <-> database.


employee.sql

step 1:
      setting -> Build, excution -> compiler -> allow automatic build check box fill
      setting -> build, excution -> advanced -> compiler -> allow auto make to start ckeck box fill

step 2:
   Update db configs in application.properties
   crete Employee entiy
   create DAO interface
   create DAO implementaion
   create REST controller to use DAO.


----------------------------------------------------
SERVICE LAYER
----------------------------------------------------

Purpose of Service Layer
Service Facade design pattern
Intermediate layher for pattern
Integrate data from multiple sources (DAO/ repository)

Spring provided the @Service annotation

@Component -> 1. @RestController , 2. @Repository, 3. @Service

Specialized Annotation for Service implementations
     - @Service applied to Service implementations
     - Spring will automatically register the Service implementation
             component-scanning.

BEST Practice for Service Layer
Best practive is to appliy transactional boundaries at the service layer
It is service layer's responsibility to manage transaction boundaries

For implementation code
   Apply @Transactional on service methods
   Remove @Transactional on DAO methods if they already exist.

---------------------
Sending JSON to Spring REST Controllers
   - When sending JSON data to Spring REST Controllers.
   - For controller to process JSON data, need to set a HTTP request header
       . Content-type: application/json
       . Need to confiure REST clinet to send the correnct HTTP request header.

 on POSTMAN
 SELECT -> body, raw, JSON.
 --------------------------------------------------------------------------
 JPA Overview  Application Architecture

 Spring Data JPA - Solution

 Sprnig Data JPA Create a DAO and just plug in your entity type and primary key

 Spring will give you CRUD implementation for FREE.

 JpaRepository
 Spring Date JPA provides the interface: JpaRepository
 Exposes methods (some by inheritance from parents.)

 Step 1 :
   Extend JpaRepository interface.

   public interface EmployeeRepostory extends JpaRepository<Employee(Entity type), Integer(primary key)> {}

   full list of methods available
   www.lub2code.com/jpa-repository-javadoc

Step 2 :
     Use Repository in you app


